# Nome do workflow que aparecerá na aba "Actions" do GitHub
name: CI - Build and Test

# Define quando esse workflow será acionado
on:
  push:              # Quando um push for feito
    branches: [ dev ]  # ... na branch "main"
  pull_request:      # Ou quando for aberta uma pull request
    branches: [ main ]  # ... com destino à branch "main"

# Definição dos jobs (tarefas) que vão rodar
jobs:
  build-and-test:          # Nome interno do job
    runs-on: ubuntu-latest # Define que o job rodará em um runner Ubuntu mais recente

    # Lista de etapas (steps) que o GitHub Actions irá executar
    steps:
      # Etapa 1: Checkout do repositório
      # Faz o download do código do repositório para dentro do ambiente do CI
      - name: Checkout do código
        uses: actions/checkout@v3  # Usa a ação oficial para fazer o checkout

      # Etapa 2: Configurar o Python
      # Define qual versão do Python será usada no ambiente
      - name: Setup do Python
        uses: actions/setup-python@v4  # Ação oficial para configurar Python
        with:
          python-version: '3.11'       # Versão do Python que queremos usar

      # Etapa 3: Instalar as dependências do projeto
      # Inclui upgrade do pip, instalação via requirements.txt e o pytest
      - name: Instalar dependências
        run: |                         # O pipe '|' permite múltiplos comandos
          python -m pip install --upgrade pip  # Atualiza o pip
          pip install -r requirements.txt      # Instala dependências do projeto
          pip install pytest                   # Garante que o pytest esteja disponível

      # Etapa 4: Rodar os testes automatizados com Pytest
      - name: Rodar os testes com Pytest
        run: |
          pytest         # Comando que executa os testes. Saída será mostrada no log.

      # Etapa 5 (opcional): Verificação de estilo com flake8
      # Ajuda a manter o código limpo e seguindo padrões PEP8
      - name: Checagem de estilo com flake8
        run: |
          pip install flake8         # Instala o flake8
          flake8 app tests           # Verifica estilo nas pastas "app" e "tests"
